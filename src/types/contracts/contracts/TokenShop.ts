/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../common";

export interface TokenShopInterface extends utils.Interface {
  functions: {
    "burnFromShop(uint256)": FunctionFragment;
    "buyTokens()": FunctionFragment;
    "getTokenPriceForBuy()": FunctionFragment;
    "getTokenPriceForSell()": FunctionFragment;
    "maxTokenCount()": FunctionFragment;
    "mintToShop(uint256)": FunctionFragment;
    "owner()": FunctionFragment;
    "pause()": FunctionFragment;
    "paused()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "sellTokens(uint256)": FunctionFragment;
    "setTokenPriceForBuy(uint256)": FunctionFragment;
    "setTokenPriceForSell(uint256)": FunctionFragment;
    "token()": FunctionFragment;
    "tokenBalance(address)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "unpause()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "burnFromShop"
      | "buyTokens"
      | "getTokenPriceForBuy"
      | "getTokenPriceForSell"
      | "maxTokenCount"
      | "mintToShop"
      | "owner"
      | "pause"
      | "paused"
      | "renounceOwnership"
      | "sellTokens"
      | "setTokenPriceForBuy"
      | "setTokenPriceForSell"
      | "token"
      | "tokenBalance"
      | "transferOwnership"
      | "unpause"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "burnFromShop",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: "buyTokens", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getTokenPriceForBuy",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getTokenPriceForSell",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "maxTokenCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "mintToShop",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "pause", values?: undefined): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "sellTokens",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setTokenPriceForBuy",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setTokenPriceForSell",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: "token", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "tokenBalance",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "unpause", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "burnFromShop",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "buyTokens", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getTokenPriceForBuy",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTokenPriceForSell",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "maxTokenCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "mintToShop", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "sellTokens", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setTokenPriceForBuy",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTokenPriceForSell",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "token", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "tokenBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unpause", data: BytesLike): Result;

  events: {
    "Burn(uint256,uint256)": EventFragment;
    "Buy(address,uint256,uint256)": EventFragment;
    "BuyPriceChange(uint256,uint256,uint256)": EventFragment;
    "Mint(uint256,uint256)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "PausedChange(bool,uint256)": EventFragment;
    "Sell(address,uint256,uint256)": EventFragment;
    "SellPriceChange(uint256,uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Burn"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Buy"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "BuyPriceChange"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Mint"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PausedChange"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Sell"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SellPriceChange"): EventFragment;
}

export interface BurnEventObject {
  amount: BigNumber;
  timestamp: BigNumber;
}
export type BurnEvent = TypedEvent<[BigNumber, BigNumber], BurnEventObject>;

export type BurnEventFilter = TypedEventFilter<BurnEvent>;

export interface BuyEventObject {
  buyer: string;
  amount: BigNumber;
  timestamp: BigNumber;
}
export type BuyEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  BuyEventObject
>;

export type BuyEventFilter = TypedEventFilter<BuyEvent>;

export interface BuyPriceChangeEventObject {
  oldValue: BigNumber;
  newValue: BigNumber;
  timestamp: BigNumber;
}
export type BuyPriceChangeEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber],
  BuyPriceChangeEventObject
>;

export type BuyPriceChangeEventFilter = TypedEventFilter<BuyPriceChangeEvent>;

export interface MintEventObject {
  amount: BigNumber;
  timestamp: BigNumber;
}
export type MintEvent = TypedEvent<[BigNumber, BigNumber], MintEventObject>;

export type MintEventFilter = TypedEventFilter<MintEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface PausedChangeEventObject {
  paused: boolean;
  timestamp: BigNumber;
}
export type PausedChangeEvent = TypedEvent<
  [boolean, BigNumber],
  PausedChangeEventObject
>;

export type PausedChangeEventFilter = TypedEventFilter<PausedChangeEvent>;

export interface SellEventObject {
  seller: string;
  amount: BigNumber;
  timestamp: BigNumber;
}
export type SellEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  SellEventObject
>;

export type SellEventFilter = TypedEventFilter<SellEvent>;

export interface SellPriceChangeEventObject {
  oldValue: BigNumber;
  newValue: BigNumber;
  timestamp: BigNumber;
}
export type SellPriceChangeEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber],
  SellPriceChangeEventObject
>;

export type SellPriceChangeEventFilter = TypedEventFilter<SellPriceChangeEvent>;

export interface TokenShop extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: TokenShopInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    burnFromShop(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    buyTokens(
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getTokenPriceForBuy(overrides?: CallOverrides): Promise<[BigNumber]>;

    getTokenPriceForSell(overrides?: CallOverrides): Promise<[BigNumber]>;

    maxTokenCount(overrides?: CallOverrides): Promise<[BigNumber]>;

    mintToShop(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    pause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    paused(overrides?: CallOverrides): Promise<[boolean]>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    sellTokens(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setTokenPriceForBuy(
      tokenPriceForBuy_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setTokenPriceForSell(
      tokenPriceForSell_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    token(overrides?: CallOverrides): Promise<[string]>;

    tokenBalance(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    unpause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  burnFromShop(
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  buyTokens(
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getTokenPriceForBuy(overrides?: CallOverrides): Promise<BigNumber>;

  getTokenPriceForSell(overrides?: CallOverrides): Promise<BigNumber>;

  maxTokenCount(overrides?: CallOverrides): Promise<BigNumber>;

  mintToShop(
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  owner(overrides?: CallOverrides): Promise<string>;

  pause(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  paused(overrides?: CallOverrides): Promise<boolean>;

  renounceOwnership(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  sellTokens(
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setTokenPriceForBuy(
    tokenPriceForBuy_: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setTokenPriceForSell(
    tokenPriceForSell_: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  token(overrides?: CallOverrides): Promise<string>;

  tokenBalance(
    account: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  transferOwnership(
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  unpause(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    burnFromShop(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    buyTokens(overrides?: CallOverrides): Promise<void>;

    getTokenPriceForBuy(overrides?: CallOverrides): Promise<BigNumber>;

    getTokenPriceForSell(overrides?: CallOverrides): Promise<BigNumber>;

    maxTokenCount(overrides?: CallOverrides): Promise<BigNumber>;

    mintToShop(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    owner(overrides?: CallOverrides): Promise<string>;

    pause(overrides?: CallOverrides): Promise<void>;

    paused(overrides?: CallOverrides): Promise<boolean>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    sellTokens(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setTokenPriceForBuy(
      tokenPriceForBuy_: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setTokenPriceForSell(
      tokenPriceForSell_: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    token(overrides?: CallOverrides): Promise<string>;

    tokenBalance(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    unpause(overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    "Burn(uint256,uint256)"(amount?: null, timestamp?: null): BurnEventFilter;
    Burn(amount?: null, timestamp?: null): BurnEventFilter;

    "Buy(address,uint256,uint256)"(
      buyer?: PromiseOrValue<string> | null,
      amount?: null,
      timestamp?: null
    ): BuyEventFilter;
    Buy(
      buyer?: PromiseOrValue<string> | null,
      amount?: null,
      timestamp?: null
    ): BuyEventFilter;

    "BuyPriceChange(uint256,uint256,uint256)"(
      oldValue?: null,
      newValue?: null,
      timestamp?: null
    ): BuyPriceChangeEventFilter;
    BuyPriceChange(
      oldValue?: null,
      newValue?: null,
      timestamp?: null
    ): BuyPriceChangeEventFilter;

    "Mint(uint256,uint256)"(amount?: null, timestamp?: null): MintEventFilter;
    Mint(amount?: null, timestamp?: null): MintEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;

    "PausedChange(bool,uint256)"(
      paused?: null,
      timestamp?: null
    ): PausedChangeEventFilter;
    PausedChange(paused?: null, timestamp?: null): PausedChangeEventFilter;

    "Sell(address,uint256,uint256)"(
      seller?: PromiseOrValue<string> | null,
      amount?: null,
      timestamp?: null
    ): SellEventFilter;
    Sell(
      seller?: PromiseOrValue<string> | null,
      amount?: null,
      timestamp?: null
    ): SellEventFilter;

    "SellPriceChange(uint256,uint256,uint256)"(
      oldValue?: null,
      newValue?: null,
      timestamp?: null
    ): SellPriceChangeEventFilter;
    SellPriceChange(
      oldValue?: null,
      newValue?: null,
      timestamp?: null
    ): SellPriceChangeEventFilter;
  };

  estimateGas: {
    burnFromShop(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    buyTokens(
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getTokenPriceForBuy(overrides?: CallOverrides): Promise<BigNumber>;

    getTokenPriceForSell(overrides?: CallOverrides): Promise<BigNumber>;

    maxTokenCount(overrides?: CallOverrides): Promise<BigNumber>;

    mintToShop(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    pause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    paused(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    sellTokens(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setTokenPriceForBuy(
      tokenPriceForBuy_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setTokenPriceForSell(
      tokenPriceForSell_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    token(overrides?: CallOverrides): Promise<BigNumber>;

    tokenBalance(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    unpause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    burnFromShop(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    buyTokens(
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getTokenPriceForBuy(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTokenPriceForSell(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    maxTokenCount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    mintToShop(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    paused(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    sellTokens(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setTokenPriceForBuy(
      tokenPriceForBuy_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setTokenPriceForSell(
      tokenPriceForSell_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    token(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    tokenBalance(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    unpause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
